*** Using c compiler gcc instead of cc ...
                         Chronologic VCS (TM)
         Version S-2021.09_Full64 -- Mon Jul  8 15:20:03 2024

                    Copyright (c) 1991 - 2021 Synopsys, Inc.
   This software and the associated documentation are proprietary to Synopsys,
 Inc. This software may only be used in accordance with the terms and conditions
 of a written license agreement with Synopsys, Inc. All other use, reproduction,
   or distribution of this software is strictly prohibited.  Licensed Products
     communicate with Synopsys servers for the purpose of providing software
    updates, detecting software piracy and verifying that customers are using
    Licensed Products in conformity with the applicable License Key for such
  Licensed Products. Synopsys will use information gathered in connection with
    this process to deliver software updates and pursue software pirates and
                                   infringers.

 Inclusivity & Diversity - Visit SolvNetPlus to read the "Synopsys Statement on
            Inclusivity and Diversity" (Refer to article 000036315 at
                        https://solvnetplus.synopsys.com)

Parsing design file '../00_TESTBED/testbench.v'
Parsing design file './alu.v'
Top Level Modules:
       testbed
TimeScale is 1 ns / 1 ps
Starting vcs inline pass...

1 module and 0 UDP read.
recompiling module testbed
rm -f _cuarc*.so _csrc*.so pre_vcsobj_*.so share_vcsobj_*.so
ld -shared  -Bsymbolic   -o .//../simv.daidir//_cuarc0.so objs/amcQw_d.o 
rm -f _cuarc0.so
if [ -x ../simv ]; then chmod a-x ../simv; fi
g++  -o ../simv      -rdynamic  -Wl,-rpath='$ORIGIN'/simv.daidir -Wl,-rpath=./simv.daidir -Wl,-rpath=/usr/cad/synopsys/vcs/cur/linux64/lib -L/usr/cad/synopsys/vcs/cur/linux64/lib  -Wl,-rpath-link=./ -Wl,--no-as-needed  /usr/lib64/libnuma.so.1     _114536_archive_1.so _cuarc0.so  SIM_l.o      rmapats_mop.o rmapats.o rmar.o rmar_nd.o  rmar_llvm_0_1.o rmar_llvm_0_0.o           -lvirsim -lerrorinf -lsnpsmalloc -lvfs    -lvcsnew -lsimprofile -luclinative /usr/cad/synopsys/vcs/cur/linux64/lib/vcs_tls.o   -Wl,-whole-archive  -lvcsucli    -Wl,-no-whole-archive          /usr/cad/synopsys/vcs/cur/linux64/lib/vcs_save_restore_new.o -ldl  -lc -lm -lpthread -ldl 
../simv up to date
Chronologic VCS simulator copyright 1991-2021
Contains Synopsys proprietary information.
Compiler version S-2021.09_Full64; Runtime version S-2021.09_Full64;  Jul  8 15:20 2024
direct_mult 1000000000000000 1111110000000000 00000000000000000000000000000000
Test[          0]: Correct! Inst=0100, A=1000000000000000, B=0000000000000000, Golden=0000000000000000, Yours=0000000000000000
direct_mult 0111111111111111 0000010000000000 00000011111000000000000000000000
Test[          1]: Correct! Inst=0100, A=0111110000000000, B=0000000000000000, Golden=0111110000000000, Yours=0111110000000000
direct_mult 0111111111111111 0000010000000000 00000011111000000000000000000000
direct_mult 0000000000000000 0000000000000000 00000000000000000000000000000000
Test[          2]: Correct! Inst=0100, A=0000000000000000, B=0000000000000000, Golden=0000000000000000, Yours=0000000000000000
direct_mult 0000000000000000 0000000000000000 00000000000000000000000000000000
direct_mult 0000000011101110 0000000011101110 00000000000001011011110100001100
Test[          3]: Correct! Inst=0100, A=0000000100101010, B=0000000000000000, Golden=0000000010111000, Yours=0000000010111000
direct_mult 0000000011101110 0000000011101110 00000000000001011011110100001100
direct_mult 1111111011110110 1111111011110110 11111111111111000010101111101110
Test[          4]: Correct! Inst=0100, A=1111111010110101, B=0000000000000000, Golden=1111111110000101, Yours=1111111110000101
direct_mult 1111111011110110 1111111011110110 11111111111111000010101111101110
direct_mult 1111101011110001 1111110001111001 11111111111111010100001100001101
Test[          5]: Correct! Inst=0100, A=1111101000110101, B=0000000000000000, Golden=1111111110101000, Yours=1111111110101000
direct_mult 1111101011110001 1111110001111001 11111111111111010100001100001101
direct_mult 1111111001011101 1111111001011101 11111111111110110011011111010010
Test[          6]: Correct! Inst=0100, A=1111110111111010, B=0000000000000000, Golden=1111111101100111, Yours=1111111101100111
direct_mult 1111111001011101 1111111001011101 11111111111110110011011111010010
direct_mult 1111111010010000 1111111010010000 11111111111110110110110011110000
Test[          7]: Correct! Inst=0100, A=1111111000110111, B=0000000000000000, Golden=1111111101101110, Yours=1111111101101110
direct_mult 1111111010010000 1111111010010000 11111111111110110110110011110000
direct_mult 0000001101000101 0000001010100011 00000000000110100001010010001010
Test[          8]: Correct! Inst=0100, A=0000001111101110, B=0000000000000000, Golden=0000001101000011, Yours=0000001101000011
direct_mult 0000001101000101 0000001010100011 00000000000110100001010010001010
direct_mult 0000000111010011 0000000111010011 00000000000011010010011001100110
Test[          9]: Correct! Inst=0100, A=0000001001000010, B=0000000000000000, Golden=0000000110100101, Yours=0000000110100101
direct_mult 0000000111010011 0000000111010011 00000000000011010010011001100110
direct_mult 0000001011101110 0000001001110111 00000000000101101111010010001011
Test[         10]: Correct! Inst=0100, A=0000001110001101, B=0000000000000000, Golden=0000001011011111, Yours=0000001011011111
direct_mult 0000001011101110 0000001001110111 00000000000101101111010010001011
direct_mult 0000000000011110 0000000000011110 00000000000000001001110001110100
Test[         11]: Correct! Inst=0100, A=0000000000100110, B=0000000000000000, Golden=0000000000010100, Yours=0000000000010100
direct_mult 0000000000011110 0000000000011110 00000000000000001001110001110100
direct_mult 1111110101101001 1111110110110101 11111111111110101001110010111000
Test[         12]: Correct! Inst=0100, A=1111110011011000, B=0000000000000000, Golden=1111111101010100, Yours=1111111101010100
direct_mult 1111110101101001 1111110110110101 11111111111110101001110010111000
direct_mult 0000001010100100 0000001001010010 00000000000101000101011111110000
Test[         13]: Correct! Inst=0100, A=0000001100111000, B=0000000000000000, Golden=0000001010001011, Yours=0000001010001011
direct_mult 0000001010100100 0000001001010010 00000000000101000101011111110000
direct_mult 1111111000101110 1111111000101110 11111111111110110001101010101110
Test[         14]: Correct! Inst=0100, A=1111110111000001, B=0000000000000000, Golden=1111111101100011, Yours=1111111101100011
direct_mult 1111111000101110 1111111000101110 11111111111110110001101010101110
direct_mult 1111101110000100 1111110011000010 11111111111111000000101110010000
Test[         15]: Correct! Inst=0100, A=1111101011001000, B=0000000000000000, Golden=1111111110000001, Yours=1111111110000001
direct_mult 1111101110000100 1111110011000010 11111111111111000000101110010000
direct_mult 1111110101010101 1111110110101011 11111111111110101001010111101011
Test[         16]: Correct! Inst=0100, A=1111110011000001, B=0000000000000000, Golden=1111111101010011, Yours=1111111101010011
direct_mult 1111110101010101 1111110110101011 11111111111110101001010111101011
direct_mult 0000000001011110 0000000001011110 00000000000000100000001101010100
Test[         17]: Correct! Inst=0100, A=0000000001110110, B=0000000000000000, Golden=0000000001000000, Yours=0000000001000000
direct_mult 0000000001011110 0000000001011110 00000000000000100000001101010100
direct_mult 1111111011110101 1111111011110101 11111111111111000010101001000100
Test[         18]: Correct! Inst=0100, A=1111111010110100, B=0000000000000000, Golden=1111111110000101, Yours=1111111110000101
direct_mult 1111111011110101 1111111011110101 11111111111111000010101001000100
direct_mult 0000000011011100 0000000011011100 00000000000001010011110100110000
Test[         19]: Correct! Inst=0100, A=0000000100010100, B=0000000000000000, Golden=0000000010101000, Yours=0000000010101000
direct_mult 0000000011011100 0000000011011100 00000000000001010011110100110000
direct_mult 0000001101001001 0000001010100101 00000000000110100011011011111010
Test[         20]: Correct! Inst=0100, A=0000001111110010, B=0000000000000000, Golden=0000001101000111, Yours=0000001101000111
direct_mult 0000001101001001 0000001010100101 00000000000110100011011011111010
direct_mult 0000001011101110 0000001001110111 00000000000101101111010010001011
Test[         21]: Correct! Inst=0100, A=0000001110001101, B=0000000000000000, Golden=0000001011011111, Yours=0000001011011111
direct_mult 0000001011101110 0000001001110111 00000000000101101111010010001011
direct_mult 1111111010111011 1111111010111011 11111111111110111011000011100100
Test[         22]: Correct! Inst=0100, A=1111111001101100, B=0000000000000000, Golden=1111111101110110, Yours=1111111101110110
direct_mult 1111111010111011 1111111010111011 11111111111110111011000011100100
direct_mult 0000001011110010 0000001001111001 00000000000101110001010110001001
Test[         23]: Correct! Inst=0100, A=0000001110010001, B=0000000000000000, Golden=0000001011100011, Yours=0000001011100011
direct_mult 0000001011110010 0000001001111001 00000000000101110001010110001001
direct_mult 1111101000010011 1111110000001010 11111111111111111011110111011110
Test[         24]: Correct! Inst=0100, A=1111100101100011, B=0000000000000000, Golden=1111111111111000, Yours=1111111111111000
direct_mult 1111101000010011 1111110000001010 11111111111111111011110111011110
direct_mult 1111100100110101 1111110000000000 00000000000000000000000000000000
Test[         25]: Correct! Inst=0100, A=1111100010011110, B=0000000000000000, Golden=0000000000000000, Yours=0000000000000000
direct_mult 1111100100110101 1111110000000000 00000000000000000000000000000000
direct_mult 1111110001011000 1111110100101100 11111111111110101110011110110100
Test[         26]: Error! Inst=0100, A=1111101110100111, B=0000000000000000, Golden=1111111101011100, Yours=1111111101011101
direct_mult 1111110001011000 1111110100101100 11111111111110101110011110110100
direct_mult 1111111100101011 1111111100101011 11111111111111001011010101010010
Test[         27]: Correct! Inst=0100, A=1111111011110110, B=0000000000000000, Golden=1111111110010111, Yours=1111111110010111
direct_mult 1111111100101011 1111111100101011 11111111111111001011010101010010
direct_mult 1111111010110000 1111111010110000 11111111111110111001111101010000
Test[         28]: Correct! Inst=0100, A=1111111001011111, B=0000000000000000, Golden=1111111101110100, Yours=1111111101110100
direct_mult 1111111010110000 1111111010110000 11111111111110111001111101010000
direct_mult 0000001001001100 0000001000100110 00000000000100010101000100000110
Test[         29]: Correct! Inst=0100, A=0000001011010001, B=0000000000000000, Golden=0000001000101010, Yours=0000001000101010
direct_mult 0000001001001100 0000001000100110 00000000000100010101000100000110
direct_mult 1111111011001001 1111111011001001 11111111111110111100101000100101
Test[         30]: Correct! Inst=0100, A=1111111001111101, B=0000000000000000, Golden=1111111101111001, Yours=1111111101111001
direct_mult 1111111011001001 1111111011001001 11111111111110111100101000100101
direct_mult 1111110110110011 1111110111011010 11111111111110101100100100000110
Test[         31]: Correct! Inst=0100, A=1111110100101111, B=0000000000000000, Golden=1111111101011001, Yours=1111111101011001
direct_mult 1111110110110011 1111110111011010 11111111111110101100100100000110
direct_mult 1111111011001110 1111111011001110 11111111111110111101001101101010
Test[         32]: Correct! Inst=0100, A=1111111010000011, B=0000000000000000, Golden=1111111101111010, Yours=1111111101111010
direct_mult 1111111011001110 1111111011001110 11111111111110111101001101101010
direct_mult 0000000001110000 0000000001110000 00000000000000100111000110110000
Test[         33]: Correct! Inst=0100, A=0000000010001101, B=0000000000000000, Golden=0000000001001110, Yours=0000000001001110
direct_mult 0000000001110000 0000000001110000 00000000000000100111000110110000
direct_mult 1111100010110110 1111110000000000 00000000000000000000000000000000
Test[         34]: Correct! Inst=0100, A=1111100000110011, B=0000000000000000, Golden=0000000000000000, Yours=0000000000000000
direct_mult 1111100010110110 1111110000000000 00000000000000000000000000000000
direct_mult 0000000101001011 0000000101001011 00000000000010001000010010110100
Test[         35]: Correct! Inst=0100, A=0000000110011100, B=0000000000000000, Golden=0000000100010001, Yours=0000000100010001
direct_mult 0000000101001011 0000000101001011 00000000000010001000010010110100
direct_mult 1111101001101100 1111110000110110 11111111111111101010110001100100
Test[         36]: Error! Inst=0100, A=1111100110110110, B=0000000000000000, Golden=1111111111010101, Yours=1111111111010110
direct_mult 1111101001101100 1111110000110110 11111111111111101010110001100100
direct_mult 1111111000101100 1111111000101100 11111111111110110001100010101000
Test[         37]: Correct! Inst=0100, A=1111110110111110, B=0000000000000000, Golden=1111111101100011, Yours=1111111101100011
direct_mult 1111111000101100 1111111000101100 11111111111110110001100010101000
direct_mult 1111101111001111 1111110011101000 11111111111110111000101100001000
Test[         38]: Correct! Inst=0100, A=1111101100010101, B=0000000000000000, Golden=1111111101110001, Yours=1111111101110001
direct_mult 1111101111001111 1111110011101000 11111111111110111000101100001000
direct_mult 1111110100001100 1111110110000110 11111111111110101000111110010100
Test[         39]: Correct! Inst=0100, A=1111110001101110, B=0000000000000000, Golden=1111111101010010, Yours=1111111101010010
direct_mult 1111110100001100 1111110110000110 11111111111110101000111110010100
direct_mult 1111111111110100 1111111111110100 11111111111111111100010010110100
Test[         40]: Correct! Inst=0100, A=1111111111110001, B=0000000000000000, Golden=1111111111111001, Yours=1111111111111001
direct_mult 1111111111110100 1111111111110100 11111111111111111100010010110100
direct_mult 1111101011000011 1111110001100010 11111111111111011011011101110010
Test[         41]: Correct! Inst=0100, A=1111101000001001, B=0000000000000000, Golden=1111111110110111, Yours=1111111110110111
direct_mult 1111101011000011 1111110001100010 11111111111111011011011101110010
direct_mult 1111110000001111 1111110100001000 11111111111110110011001011000000
Test[         42]: Correct! Inst=0100, A=1111101101011000, B=0000000000000000, Golden=1111111101100110, Yours=1111111101100110
----------------------------------------------
  Wrong! Total error:           2                      
----------------------------------------------
direct_mult 1111110000001111 1111110100001000 11111111111110110011001011000000
$finish called from file "../00_TESTBED/testbench.v", line 236.
$finish at simulation time               910000
           V C S   S i m u l a t i o n   R e p o r t 
Time: 910000 ps
CPU Time:      0.240 seconds;       Data structure size:   0.0Mb
Mon Jul  8 15:20:06 2024
CPU time: .309 seconds to compile + .267 seconds to elab + .163 seconds to link + .270 seconds in simulation
